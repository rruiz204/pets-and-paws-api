// <auto-generated />
using System;
using Infrastructure.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(PgDbContext))]
    [Migration("20241115165432_SeedRolesAnScopes")]
    partial class SeedRolesAnScopes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Relations.RoleScope", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("ScopeId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("RoleScope");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            ScopeId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            ScopeId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            ScopeId = 3
                        },
                        new
                        {
                            RoleId = 2,
                            ScopeId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            ScopeId = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Relations.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.ResetToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ResetToken");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Responsible for the overall management of the system, with full access to all functions and configurations.",
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Provides medical care to animals, performs diagnostics, treatments, and surgeries, and ensures animal health and safety.",
                            Name = "veterinarian"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Supports veterinarians with patient care, helps prepare animals and equipment, and manages routine tasks in the clinic.",
                            Name = "assistant"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Manages appointments, handles client check-ins, processes payments, and provides information to clients about services.",
                            Name = "receptionist"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Conducts tests and analyses on samples, supports diagnostics, and maintains laboratory equipment and records.",
                            Name = "laboratory-technician"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Assists clients with pet adoption, provides information on animals, and ensures adoption procedures are followed.",
                            Name = "adoption-specialist"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Manages and dispenses medications, advises clients on treatments, and ensures pharmaceutical compliance and inventory.",
                            Name = "pharmacist"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Scope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Scope");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Allows access to all modules",
                            Name = "global-access"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Allows viewing the list and details of pets",
                            Name = "pets-directory:read"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Allows adding new pets to the directory",
                            Name = "pets-directory:create"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Allows editing information of existing pets",
                            Name = "pets-directory:update"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Allows deleting pets from the directory",
                            Name = "pets-directory:delete"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            FirstName = "admin",
                            LastName = "admin",
                            Password = "AQAAAAIAAYagAAAAEJ5qVIICYidnHFACGraHPIwBtNdC1gMeYFEAhQGcWThgLtkhMobm4uj8EbAPPF7CqQ==",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tester@tester.com",
                            FirstName = "tester",
                            LastName = "tester",
                            Password = "AQAAAAIAAYagAAAAEJ5qVIICYidnHFACGraHPIwBtNdC1gMeYFEAhQGcWThgLtkhMobm4uj8EbAPPF7CqQ==",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Relations.RoleScope", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("RoleScopes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Scope", "Scope")
                        .WithMany("RoleScopes")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Domain.Entities.Relations.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleScopes");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Scope", b =>
                {
                    b.Navigation("RoleScopes");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
